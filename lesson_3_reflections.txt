When would you want to use a remote repository rather than keeping all your work local?
Using a remote repository can be useful when you're working on a project but you're on a vacation, or when helping a client located on a different country.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Pulling changes manually makes your local repsitory more stable that having it automatically sync with the remote repository. Someone might have pushed changes to your remote which can break the current state of the project you are working on.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

Forks are copies of a repository from another user within GitHub. You use this method when you want to use a public repository of another user and make your own changes to it without authority issues or without affecting the original creator's remote repository.
Clones are either copies of a repository from GitHub to a local machine, or from within the same local machine. You use this method to duplicate a repository for just about any purpose.
Branches are labels or pointers to a commit. You create a branch when you want to work on a project or a task usually to isolate it from the master or production branch. It's similar to clone, just on a smaller scale.

What is the benefit of having a copy of the last known state of the remote stored locally?

One benefit of this is to be able to track whether the developer's local repository is still in sync with the remote, especially when collaborating with other users. 

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

Maybe SVN, because that's the only alternative I know. I think it will be not that different.

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

Changes in master, I think, is generally acceptable when you are working alone. As each commit is basically your change, it's not that critical to just go back to previous commit in case you made a mistake. However, when it comes to collaborating with other people and working with a very big project, it is vital to work on a separate branch to ensure the correctness and efficiency of the changes that will be incorporated to the master branch. By having a separate branch, peer reviews will be a lot easier.